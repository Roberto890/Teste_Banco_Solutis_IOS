//
//  LoginRouter.swift
//  SolutisTeste
//
//  Created by Virtual Machine on 16/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

    //MARK:- Protocol to do segue
@objc protocol LoginRouterProtocol {
    func routeToStatement(segue: UIStoryboardSegue?)
    func start()
    func setup() -> LoginViewController
}

    //MARK:- Stored data (interactor take this data and we can get)
protocol LoginDataPassingProtocol {
    var dataStore: LoginDataStoreProtocol? { get }
}
    
    // MARK:- Route
class LoginRouter: NSObject, LoginRouterProtocol, LoginDataPassingProtocol {
    
    var dataStore: LoginDataStoreProtocol?
    weak var viewController: LoginViewController?
    
    private let navigation: UINavigationController
    
    init(navigation: UINavigationController) {
        self.navigation = navigation
    }
    
    func start() {
        navigation.pushViewController(setup(), animated: true)
    }
    
    //MARK: - SETUP
    func setup() -> LoginViewController {
        let requesterHTTP = APIRequest()
        let utils = Utils()
        let worker = LoginWorker(apiRequester: requesterHTTP, utils: utils)
        let presenter = LoginPresenter()
        let interactor = LoginInteractor(worker: worker, presenter: presenter)
        let viewController = navigation.storyboard?.instantiateViewController(withIdentifier: "LoginViewController") as! LoginViewController
        viewController.interactor = interactor
        viewController.loginRouter = self
        presenter.viewController = viewController
        self.viewController = viewController
        self.dataStore = interactor
        return viewController
    }
    
    // MARK:- Do the segue
    func routeToStatement(segue: UIStoryboardSegue?) {
        let statementRouter = StatementRouter(navigation: navigation)
        let statementVc = statementRouter.setup()
        var statementDataStore = statementRouter.dataStore
        passDataToStatement(source: dataStore!, destination: &statementDataStore)
        navigateToStatement(source: viewController!, destination: statementVc)
        
    }
    
    // MARK:- Do the navigation to next view controller
    func navigateToStatement(source: LoginViewController, destination: StatementViewController) {
        source.show(destination, sender: nil)
    }
    
    // MARK:- Passing data to view controller precisa do inout aqui pq se retirar ele consta a destinationDS como let ai nao consigo adicionar um valor para userData
    func passDataToStatement(source: LoginDataStoreProtocol, destination: inout StatementDataStoreProtocol?) {
        destination?.userData = source.userData
    }
    
}
