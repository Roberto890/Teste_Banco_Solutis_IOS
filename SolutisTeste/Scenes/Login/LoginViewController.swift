//
//  LoginViewController.swift
//  SolutisTeste
//
//  Created by Virtual Machine on 16/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD
import LocalAuthentication

    //MARK:- ViewController protocol - used in presenter
protocol LoginViewControllerProtocol: AnyObject {
    func callDisplayUserData(viewModel: Login.doLogin.ViewModel)
    func callDisplayError(error: String)
    func callDisplayKeyChainData(userLogin: Login.loginView.ViewModel)
    func callDisplaySwtError(error: String)
    func callDisplaySwtVerification(message: String)
    func callDisplayBiometricVerification(user: Login.biometricVerification.ViewModel)
    func callDisplayBiometricError(error: String)
    
    func doLogin(user: UserLogin, swtEmail: UISwitch, swtBiometric: UISwitch)
    func switchVerification(type: String, swtEmail: Bool, swtBiometric: Bool)
    func keyChainVerification()
    func biometricVerification()
}

//protocol LoginRouterDelegate {
//    func setup()
//}

class LoginViewController: UIViewController {
    
    //MARK:- Variables to for interactor and router
    var interactor: LoginInteractorProtocol?
    var loginRouter: (NSObjectProtocol & LoginRouterProtocol & LoginDataPassingProtocol)?
    var loginView: LoginViewProtocol?

    override func viewDidLoad() {
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        keyChainVerification()
        self.navigationController?.navigationBar.isHidden = true
    }
    
    // MARK: IBOutlets and Variables
//    @IBOutlet weak var swtBiometric: UISwitch!
//    @IBOutlet weak var swtEmail: UISwitch!
//    @IBOutlet weak var txtPassword: UITextField!
//    @IBOutlet weak var txtUsername: UITextField!
//    @IBOutlet weak var txtError: UILabel!
//    @IBOutlet weak var btnLogin: UIButton!
    

    
}

//    //MARK:- TEXT FIELD Implementations
//extension LoginViewController: UITextFieldDelegate{
//
//    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool{
//        txtError.isHidden = true
//        return true
//    }
//}

    //MARK:- LoginDisplayLogic - Presenter Return
extension LoginViewController: LoginViewControllerProtocol {
    
    func switchVerification(type: String, swtEmail: Bool, swtBiometric: Bool) {
        let request = Login.swtVerification.Request(type: "Email", switchLogin: swtEmail, switchBiometric: swtBiometric)
        interactor!.swtVerifications(request: request)
    }

    func doLogin(user: UserLogin, swtEmail: UISwitch, swtBiometric: UISwitch){
        let request = Login.doLogin.Request(user: user, switchLogin: swtEmail.isOn, switchBiometric: swtBiometric.isOn)
        interactor!.doLogin(request: request)
    }
    
    func keyChainVerification(){
        let viewRequest = Login.loginView.Request()
        interactor?.keyChainVerification(request: viewRequest)
    }
    
    func biometricVerification() {
        let context = LAContext()
        let request = Login.biometricVerification.Request(context: context)
        self.interactor!.biometricVerification(request: request)
    }
   
    func callDisplayUserData(viewModel: Login.doLogin.ViewModel) {
        DispatchQueue.main.async { [self] in
            loginRouter?.routeToStatement(segue: nil)
            SVProgressHUD.dismiss()
            loginView?.enableButton()
//            self.btnLogin.isEnabled = true
        }
    }
    
    func callDisplayError(error: String) {
        DispatchQueue.main.async { [self] in
            SVProgressHUD.dismiss()
            loginView?.displayError()
        }
    }
    
    func callDisplayKeyChainData(userLogin: Login.loginView.ViewModel ) {
        DispatchQueue.main.async { [self] in
            loginView?.displayKeyChainData(userLogin: userLogin)
        }
    }
    
    func callDisplaySwtError(error: String) {
        DispatchQueue.main.async { [self] in
            loginView?.displaySwtError(error: error)
        }
    }
    
    func callDisplaySwtVerification(message: String) {
        DispatchQueue.main.async { [self] in
            loginView?.displaySwtVerification(message: message)
        }
    }
    
    func callDisplayBiometricVerification(user: Login.biometricVerification.ViewModel) {
        DispatchQueue.main.async { [self] in
            loginView?.displayBiometricVerification(user: user)
//            let swtLogin = self.swtEmail!
//            swtLogin.isOn = true
//            let swtBiometric = self.swtBiometric!
//            swtBiometric.isOn = true
//            self.doLogin(user: user.user, swtLogin: swtLogin, swtBiometric: swtBiometric)
        }
    }
    
    func callDisplayBiometricError(error: String) {
        DispatchQueue.main.async {
            self.loginView?.displayBiometricError(error: error)
        }
    }
}

