//
//  LoginViewController.swift
//  SolutisTeste
//
//  Created by Virtual Machine on 16/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD
import LocalAuthentication

    //MARK:- ViewController protocol - used in presenter
protocol LoginViewControllerProtocol: AnyObject {
    func displayUserData(viewModel: Login.doLogin.ViewModel)
    func displayError(error: String)
    func displayKeyChainData(userLogin: Login.loginView.ViewModel)
    func displaySwtError(error: String)
    func displaySwtVerification(message: String)
    func displayBiometricVerification(user: Login.biometricVerification.ViewModel)
    func displayBiometricError(error: String)
}

//protocol LoginRouterDelegate {
//    func setup()
//}

class LoginViewController: UIViewController {
    
    //MARK:- Variables to for interactor and router
    var interactor: LoginInteractorProtocol?
    var loginRouter: (NSObjectProtocol & LoginRouterProtocol & LoginDataPassingProtocol)?

    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        let viewRequest = Login.loginView.Request(switchLogin: swtEmail.isOn, switchBiometric: swtBiometric.isOn)
        interactor?.keyChainVerification(request: viewRequest)
        self.navigationController?.navigationBar.isHidden = true
    }
    
    // MARK: IBOutlets and Variables
    @IBOutlet weak var swtBiometric: UISwitch!
    @IBOutlet weak var swtEmail: UISwitch!
    @IBOutlet weak var txtPassword: UITextField!
    @IBOutlet weak var txtUsername: UITextField!
    @IBOutlet weak var txtError: UILabel!
    @IBOutlet weak var btnLogin: UIButton!
    
    // MARK: IBActions and ViewController functions
    @IBAction func btnLogin(_ sender: Any) {
        self.btnLogin.isEnabled = false
        guard let login = txtUsername.text else{return}
        guard let password = txtPassword.text else{return}
        let userLogin = UserLogin(login: login, password: password)
        doLogin(user: userLogin, swtLogin: swtEmail, swtBiometric: swtBiometric)
    }
    
    @IBAction func swtEmailChanged(_ sender: Any) {
        let request = Login.swtVerification.Request(type: "Email", switchLogin: swtEmail.isOn, switchBiometric: swtBiometric.isOn)
        interactor!.swtVerifications(request: request)
    }
    
    @IBAction func swtBiometricChanged(_ sender: Any) {
        let request = Login.swtVerification.Request(type: "Biometric", switchLogin: swtEmail.isOn, switchBiometric: swtBiometric.isOn)
        interactor!.swtVerifications(request: request)
    }
    
    @IBAction func dismissKeyboardTop(_ sender: Any) {
        self.view.endEditing(true)
    }
    
    @IBAction func dismissKeyboardMiddle(_ sender: Any) {
        self.view.endEditing(true)
    }
    
    func doLogin(user: UserLogin, swtLogin: UISwitch, swtBiometric: UISwitch){
        let request = Login.doLogin.Request(user: user, switchLogin: swtEmail.isOn, switchBiometric: swtBiometric.isOn)
        interactor!.doLogin(request: request)
    }
    
}

    //MARK:- TEXT FIELD Implementations
extension LoginViewController: UITextFieldDelegate{
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool{
        txtError.isHidden = true
        return true
    }
}

    //MARK:- LoginDisplayLogic - Presenter Return
extension LoginViewController: LoginViewControllerProtocol{
   
    func displayUserData(viewModel: Login.doLogin.ViewModel) {
        DispatchQueue.main.async {
            self.loginRouter?.routeToStatement(segue: nil)
            SVProgressHUD.dismiss()
            self.btnLogin.isEnabled = true
        }
    }
    
    func displayError(error: String) {
        DispatchQueue.main.async {
            SVProgressHUD.dismiss()
            self.txtError.isHidden = false
            self.btnLogin.isEnabled = true
        }
    }
    
    func displayKeyChainData(userLogin: Login.loginView.ViewModel ) {
        DispatchQueue.main.async {
            let context = LAContext()
            self.txtUsername.text = userLogin.user.login
            self.txtPassword.text = userLogin.user.password
            if self.txtUsername.text != "" {
                self.swtEmail.isOn = true
            }else {
                self.swtEmail.isOn = false
            }
            if self.txtPassword.text != "" {
                let request = Login.biometricVerification.Request(context: context)
                self.swtBiometric.isOn = true
                self.interactor!.biometricVerification(request: request)
            }else {
                self.swtBiometric.isOn = false
            }
        }
    }
    
    func displaySwtError(error: String) {
        DispatchQueue.main.async {
            Utils().showAlert(error, ui: self)
            self.swtEmail.isOn = true
        }
    }
    
    func displaySwtVerification(message: String) {
        DispatchQueue.main.async {
            Utils().showAlert(message, ui: self)
            self.swtEmail.isOn = true
        }
    }
    
    func displayBiometricVerification(user: Login.biometricVerification.ViewModel) {
        DispatchQueue.main.async {
            let swtLogin = self.swtEmail!
            swtLogin.isOn = true
            let swtBiometric = self.swtBiometric!
            swtBiometric.isOn = true
            self.doLogin(user: user.user, swtLogin: swtLogin, swtBiometric: swtBiometric)
        }
    }
    
    func displayBiometricError(error: String) {
        DispatchQueue.main.async {
            Utils().showAlert(error, ui: self)
            self.swtBiometric.isOn = false
        }
    }
}

