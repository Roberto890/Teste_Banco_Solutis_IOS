//
//  StatementViewController.swift
//  SolutisTeste
//
//  Created by Virtual Machine on 16/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD

    //MARK:- ViewController protocol - used in presenter
protocol StatementViewControllerProtocol: AnyObject {
    func doLogout()
    func startView()
    
    func callDisplayLogout()
    func callDisplayUserData(loadUser: Statement.loadUser.ViewModel)
    func callDisplayLoadStatement(statementData: Statement.loadStatement.ViewModel)
    func callDisplayLoadStatementError(error: String)
}

class StatementViewController: UIViewController {
    
    //MARK:- Variables to for interactor and router
    var interactor: StatementInteractorProtocol?
    var statementRouter: (NSObjectProtocol & StatementRouterProtocol & StatementDataPassingProtocol)?
    var statementView: StatementViewProtocol?
        
    // MARK:- View LifeCycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        self.navigationController?.navigationBar.isHidden = true
        startView()
        let requestLoadUser = Statement.loadUser.Request()
        interactor?.loadUserData(request: requestLoadUser)
        let requestLoadStatement = Statement.loadStatement.Request()
        interactor?.loadStatement(request: requestLoadStatement)
    }

    func startView(){
        statementView?.loadGradient()
    }
 
}

    // MARK: - DISPLAY LOGIC
extension StatementViewController: StatementViewControllerProtocol {

    func callDisplayLogout() {
        statementView?.displayDoLogout(controller: self)
    }
    
    func doLogout() {
        statementRouter?.routeToLogin(segue: nil)
    }
    
    func callDisplayUserData(loadUser: Statement.loadUser.ViewModel) {
        DispatchQueue.main.async { [self] in
            statementView?.displayUserData(loadUser: loadUser)
        }
    }
    
    func callDisplayLoadStatement(statementData: Statement.loadStatement.ViewModel) {
        DispatchQueue.main.async { [self] in
            statementView?.displayLoadStatement(statementData: statementData)
        }
    }
    
    func callDisplayLoadStatementError(error: String) {
        DispatchQueue.main.async { [self] in
            statementView?.displayLoadStatementError(error: error)
        }
        
    }
}
